{"version":3,"sources":["Components/Card/Card.js","Components/Card-list/CardList.js","Components/Searchbox/Searchbox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","roboid","alt","roboname","robomail","CardList","robos","map","robo","id","name","email","Searchbox","type","placeholder","onChange","search","App","state","robots","searchField","fetch","then","response","json","users","setState","this","filterRobots","filter","robot","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTACaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,OAAhC,0BACHC,IAAI,UAEN,6BAAwBJ,EAAMK,UAArBL,EAAMG,QACf,4BAAIH,EAAMM,eCNHC,EAAW,SAACP,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMQ,MAAMC,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAAMP,OAAQO,EAAKC,GAAIN,SAAUK,EAAKE,KAAMN,SAAUI,EAAKG,cCNtDC,G,MAAY,SAACd,GACxB,OACE,qBAAKC,UAAU,aAAf,SACE,uBACEc,KAAK,SACLC,YAAY,cACZf,UAAU,eACVgB,SAAUjB,EAAMkB,aC6BTC,E,kDA/Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,GACRC,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEP,OAAQM,S,oBAG7C,WAAU,IAAD,OACP,EAAgCE,KAAKT,MAA7BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YACVQ,EAAeT,EAAOU,QAAO,SAACC,GAAD,OACjCA,EAAMpB,KAAKqB,cAAcC,SAASZ,EAAYW,kBAEhD,OACE,sBAAKhC,UAAU,MAAf,UACE,wCACA,cAAC,EAAD,CACEiB,OAAQ,SAACiB,GAAD,OAAO,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,WAEvD,cAAC,EAAD,CAAU7B,MAAOsB,W,GA1BPQ,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4afee39f.chunk.js","sourcesContent":["import \"./Card.css\";\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${props.roboid}?set=set3&size=180x180`}\n        alt=\"robot\"\n      />\n      <h2 key={props.roboid}>{props.roboname}</h2>\n      <p>{props.robomail}</p>\n    </div>\n  );\n};\n","import \"./CardList.css\";\nimport { Card } from \"../Card/Card\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"robo-card\">\n      {props.robos.map((robo) => (\n        <Card roboid={robo.id} roboname={robo.name} robomail={robo.email} />\n      ))}\n    </div>\n  );\n};\n","import \"./Searchbox.css\";\nexport const Searchbox = (props) => {\n  return (\n    <div className=\"search-box\">\n      <input\n        type=\"search\"\n        placeholder=\"Search Robo\"\n        className=\"search-input\"\n        onChange={props.search}\n      ></input>\n    </div>\n  );\n};\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./Components/Card-list/CardList.js\";\nimport { Searchbox } from \"./Components/Searchbox/Searchbox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filterRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Robots</h1>\n        <Searchbox\n          search={(e) => this.setState({ searchField: e.target.value })}\n        ></Searchbox>\n        <CardList robos={filterRobots}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}